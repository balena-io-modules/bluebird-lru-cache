// Generated by CoffeeScript 1.9.2
(function() {
  var BluebirdLRU, LRUCache, Promise, TypedError,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  LRUCache = require('lru-cache');

  Promise = require('bluebird');

  TypedError = require('typed-error');

  module.exports = BluebirdLRU = (function(superClass) {
    var NoSuchKeyError, fn, i, len, method, ref, rejectCheck, rejectedGet, rejectedPeek;

    extend(BluebirdLRU, superClass);

    ref = ['set', 'get', 'peek', 'del', 'reset', 'has', 'keys', 'values'];
    fn = function() {
      var promisifiedMethod;
      promisifiedMethod = Promise.method(BluebirdLRU.prototype[method]);
      if (promisifiedMethod.length > 0) {
        return BluebirdLRU.prototype[method] = function() {
          if (arguments.length > 0) {
            return Promise.all(arguments).bind(this).spread(promisifiedMethod);
          } else {
            return promisifiedMethod.apply(this, arguments);
          }
        };
      } else {
        return BluebirdLRU.prototype[method] = promisifiedMethod;
      }
    };
    for (i = 0, len = ref.length; i < len; i++) {
      method = ref[i];
      fn();
    }

    BluebirdLRU.NoSuchKeyError = NoSuchKeyError = (function(superClass1) {
      extend(NoSuchKeyError, superClass1);

      function NoSuchKeyError(key1) {
        this.key = key1;
        NoSuchKeyError.__super__.constructor.apply(this, arguments);
      }

      return NoSuchKeyError;

    })(TypedError);

    rejectCheck = function(key) {
      return function(value) {
        if (value === void 0) {
          throw new NoSuchKeyError(key);
        }
        return value;
      };
    };

    rejectedGet = function(key) {
      return BluebirdLRU.prototype.get.apply(this, arguments).then(rejectCheck(key));
    };

    rejectedPeek = function(key) {
      return BluebirdLRU.prototype.peek.apply(this, arguments).then(rejectCheck(key));
    };

    function BluebirdLRU(options) {
      var catchFn, fetchFn;
      if (options == null) {
        options = {};
      }
      if (!(this instanceof BluebirdLRU)) {
        return new BluebirdLRU(options);
      }
      BluebirdLRU.__super__.constructor.apply(this, arguments);
      if (options.fetchFn) {
        fetchFn = Promise.method(options.fetchFn);
        catchFn = (function(_this) {
          return function(arg) {
            var key;
            key = arg.key;
            return fetchFn(key).tap(function(value) {
              return _this.set(key, value);
            });
          };
        })(this);
        this.get = function() {
          return rejectedGet.apply(this, arguments)["catch"](NoSuchKeyError, catchFn);
        };
        this.peek = function() {
          return rejectedPeek.apply(this, arguments)["catch"](NoSuchKeyError, catchFn);
        };
      } else if (!options.noreject) {
        this.get = rejectedGet;
        this.peek = rejectedPeek;
      }
    }

    return BluebirdLRU;

  })(LRUCache);

}).call(this);
